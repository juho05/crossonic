// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    keyValue,
    scrobble,
  ];
  late final Shape0 keyValue = Shape0(
      source: i0.VersionedTable(
        entityName: 'key_value',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY("key")',
        ],
        columns: [
          _column_0,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 scrobble = Shape1(
      source: i0.VersionedTable(
        entityName: 'scrobble',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(song_id, start_time)',
        ],
        columns: [
          _column_2,
          _column_3,
          _column_4,
          _column_5,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get key =>
      columnsByName['key']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get value =>
      columnsByName['value']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('key', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('value', aliasedName, false,
        type: i1.DriftSqlType.string);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get songId =>
      columnsByName['song_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get startTime =>
      columnsByName['start_time']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<int> get listenDurationMs =>
      columnsByName['listen_duration_ms']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get songDurationMs =>
      columnsByName['song_duration_ms']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_2(String aliasedName) =>
    i1.GeneratedColumn<String>('song_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_3(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('start_time', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<int> _column_4(String aliasedName) =>
    i1.GeneratedColumn<int>('listen_duration_ms', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_5(String aliasedName) =>
    i1.GeneratedColumn<int>('song_duration_ms', aliasedName, true,
        type: i1.DriftSqlType.int);

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    keyValue,
    scrobble,
    playlist,
    playlistSong,
  ];
  late final Shape0 keyValue = Shape0(
      source: i0.VersionedTable(
        entityName: 'key_value',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY("key")',
        ],
        columns: [
          _column_0,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 scrobble = Shape1(
      source: i0.VersionedTable(
        entityName: 'scrobble',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(song_id, start_time)',
        ],
        columns: [
          _column_2,
          _column_3,
          _column_4,
          _column_5,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 playlist = Shape2(
      source: i0.VersionedTable(
        entityName: 'playlist',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 playlistSong = Shape3(
      source: i0.VersionedTable(
        entityName: 'playlist_song',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_15,
          _column_16,
          _column_17,
          _column_2,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id =>
      columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name =>
      columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get comment =>
      columnsByName['comment']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get songCount =>
      columnsByName['song_count']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get durationMs =>
      columnsByName['duration_ms']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get created =>
      columnsByName['created']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get changed =>
      columnsByName['changed']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get coverArt =>
      columnsByName['cover_art']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get download =>
      columnsByName['download']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('comment', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('song_count', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<int> _column_10(String aliasedName) =>
    i1.GeneratedColumn<int>('duration_ms', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_11(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_12(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('changed', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_13(String aliasedName) =>
    i1.GeneratedColumn<String>('cover_art', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_14(String aliasedName) =>
    i1.GeneratedColumn<bool>('download', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'CHECK ("download" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id =>
      columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get playlistId =>
      columnsByName['playlist_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get index =>
      columnsByName['index']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get songId =>
      columnsByName['song_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get childModelJson =>
      columnsByName['child_model_json']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<int> _column_15(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('playlist_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways(
            'REFERENCES playlist (id) ON DELETE CASCADE'));
i1.GeneratedColumn<int> _column_17(String aliasedName) =>
    i1.GeneratedColumn<int>('index', aliasedName, false,
        type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('child_model_json', aliasedName, false,
        type: i1.DriftSqlType.string);

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    keyValue,
    scrobble,
    playlist,
    playlistSong,
    downloadTask,
  ];
  late final Shape0 keyValue = Shape0(
      source: i0.VersionedTable(
        entityName: 'key_value',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY("key")',
        ],
        columns: [
          _column_0,
          _column_1,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 scrobble = Shape1(
      source: i0.VersionedTable(
        entityName: 'scrobble',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(song_id, start_time)',
        ],
        columns: [
          _column_2,
          _column_3,
          _column_4,
          _column_5,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 playlist = Shape2(
      source: i0.VersionedTable(
        entityName: 'playlist',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
          _column_11,
          _column_12,
          _column_13,
          _column_14,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 playlistSong = Shape3(
      source: i0.VersionedTable(
        entityName: 'playlist_song',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_15,
          _column_16,
          _column_17,
          _column_2,
          _column_18,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 downloadTask = Shape4(
      source: i0.VersionedTable(
        entityName: 'download_task',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(task_id, type)',
        ],
        columns: [
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get taskId =>
      columnsByName['task_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get type =>
      columnsByName['type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get object =>
      columnsByName['object']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get group =>
      columnsByName['group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get status =>
      columnsByName['status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get updated =>
      columnsByName['updated']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('task_id', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('type', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>('object', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>('group', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('status', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_24(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('updated', aliasedName, false,
        type: i1.DriftSqlType.dateTime);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
      from2To3: from2To3,
      from3To4: from3To4,
    ));
