name: Release Draft

on:
  workflow_dispatch:

env:
  FLUTTER_VERSION: "3.32.6"
  GSTREAMER_VERSION: "1.26.3"
  APK_BUILD_DIR: "/tmp/build"

jobs:
  build:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(sed -n 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*/\1/p' pubspec.yaml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build_android:
    needs: build
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copy files to env.APK_BUILD_DIR
        run: |
          mkdir -p $APK_BUILD_DIR
          cp -r . $APK_BUILD_DIR

      - name: Decode key.properties file
        working-directory: ${{ env.APK_BUILD_DIR }}
        env:
          ENCODED_STRING: ${{ secrets.ANDROID_KEY_PROPERTIES }}
        run: echo $ENCODED_STRING | base64 -di > android/key.properties

      - name: Decode crossonic.jks file
        working-directory: ${{ env.APK_BUILD_DIR }}
        env:
          ENCODED_STRING: ${{ secrets.ANDROID_KEY_STORE }}
        run: mkdir android/app/secrets && echo $ENCODED_STRING | base64 -di > android/app/secrets/crossonic.jks

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Dependencies
        working-directory: ${{ env.APK_BUILD_DIR }}
        run: flutter pub get

      - name: Build generated files
        working-directory: ${{ env.APK_BUILD_DIR }}
        run: flutter pub run build_runner build

      - name: Build APK
        working-directory: ${{ env.APK_BUILD_DIR }}
        run: flutter build apk --split-per-abi

      - name: Build App Bundle
        working-directory: ${{ env.APK_BUILD_DIR }}
        run: flutter build appbundle --dart-define=VERSION_CHECK=false

      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-result
          path: |
            ${{ env.APK_BUILD_DIR }}/build/app/outputs/bundle/release/app-release.aab
          retention-days: 90

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-result
          path: |
            ${{ env.APK_BUILD_DIR }}/build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
            ${{ env.APK_BUILD_DIR }}/build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
            ${{ env.APK_BUILD_DIR }}/build/app/outputs/flutter-apk/app-x86_64-release.apk
          retention-days: 2

  build_linux_x86_64:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get remove libunwind-*
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gstreamer1.0-plugins-good gstreamer1.0-plugins-bad libsecret-1-dev libjsoncpp-dev libayatana-appindicator3-dev

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Dependencies
        run: flutter pub get
      - name: Build generated files
        run: flutter pub run build_runner build
      - name: Compile linux
        run: flutter build linux

      # tar.gz
      - name: Create tar.gz archive
        run: |
          cd build/linux/x64/release/bundle
          tar -czvf ../../../../../result.tar.gz *

      - name: Upload tar.gz archive
        uses: actions/upload-artifact@v4
        with:
          name: tar-gz-x86-64-result
          path: ./*.tar.gz

      # AppImage
      - name: Copy compiled linux files
        run: |
          mkdir AppDir
          cp -r build/linux/x64/release/bundle/* AppDir/

      - name: Copy logo to AppDir
        run: |
          mkdir -p AppDir/usr/share/icons/hicolor/32x32/apps
          cp assets/icon/desktop/crossonic-32.png AppDir/usr/share/icons/hicolor/32x32/apps/crossonic.png
          mkdir -p AppDir/usr/share/icons/hicolor/128x128/apps
          cp assets/icon/desktop/crossonic-128.png AppDir/usr/share/icons/hicolor/128x128/apps/crossonic.png
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          cp assets/icon/desktop/crossonic-256.png AppDir/usr/share/icons/hicolor/256x256/apps/crossonic.png

      - name: Copy Recipe to correct location
        run: cp scripts/appimage/AppImageBuilder_x86_64.yml AppImageBuilder.yml

      - name: Build AppImage
        uses: AppImageCrafters/build-appimage@57c3bc6963f870ce3be103117de5b5e33ffbaeb6
        with:
          recipe: ./AppImageBuilder.yml

      - name: Upload AppImage file
        uses: actions/upload-artifact@v4
        with:
          name: appimage-x86-64-result
          path: ./*.AppImage
          retention-days: 2

  build_windows_x86_64:
    needs: build
    runs-on: windows-latest

    steps:
      - name: Fix long file paths
        run: git config --system core.longpaths true

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GStreamer
        uses: marcpabst/setup-gstreamer@3bafa9efb10f967158fceb6b5b34c2fc4399d141 # v1.5.3
        with:
          version: ${{ env.GSTREAMER_VERSION }}
          arch: "x86_64"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Dependencies
        run: flutter pub get
      - name: Build generated files
        run: flutter pub run build_runner build
      - name: Compile for Windows
        run: flutter build windows

      - name: Build iss script
        run: dart run inno_bundle:build --no-app --release --no-installer

      - name: Output config into github output
        id: envs
        run: echo $(dart run inno_bundle:build --envs --no-hf) | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Build installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.5
        with:
          path: ./build/windows/x64/installer/Release/inno-script.iss
          options: /Fcrossonic-installer

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-x86-64-result
          path: ./build/windows/x64/installer/Release/crossonic-installer.exe

      - name: Add DLL files
        run: |
          Copy-Item scripts/windows/x64/msvcp140.dll build/windows/x64/runner/Release/
          Copy-Item scripts/windows/x64/vcruntime140.dll build/windows/x64/runner/Release/
          Copy-Item scripts/windows/x64/vcruntime140_1.dll build/windows/x64/runner/Release/

      - name: Zip compiled files
        run: Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath Crossonic.zip

      - name: Upload zip
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip-x86-64-result
          path: Crossonic.zip
          retention-days: 2
  build_macos_dmg:
    needs: build
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GStreamer
        uses: marcpabst/setup-gstreamer@3bafa9efb10f967158fceb6b5b34c2fc4399d141 # v1.5.3
        with:
          version: ${{ env.GSTREAMER_VERSION }}
          arch: "universal"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Dependencies
        run: flutter pub get
      - name: Build generated files
        run: flutter pub run build_runner build
      - name: Compile for macOS
        run: flutter build macos

      - name: Create .dmg file
        run: |
          npm install -g appdmg
          cd scripts/dmg
          appdmg config.json ../../Crossonic.dmg

      - name: Upload .dmg file
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg-result
          path: Crossonic.dmg
          retention-days: 2
  build_web_zip:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"

      - name: Dependencies
        run: flutter pub get
      - name: Build generated files
        run: flutter pub run build_runner build
      - name: Compile for web
        run: flutter build web --wasm

      - name: Create .zip archive
        run: |
          cd build/web
          zip -r ../../crossonic.zip .

      - name: Upload .zip file
        uses: actions/upload-artifact@v4
        with:
          name: web-zip-result
          path: crossonic.zip
          retention-days: 2
  release:
    needs:
      - build
      - build_android
      - build_linux_x86_64
      - build_windows_x86_64
      - build_macos_dmg
      - build_web_zip
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Draft release
        id: draft_release
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: v${{ needs.build.outputs.version }}
          name: v${{ needs.build.outputs.version }}

      # Android
      - name: Download Android files
        uses: actions/download-artifact@v4
        with:
          name: android-apk-result
          path: android-apk-result

      - name: Copy APKs to root
        run: cp android-apk-result/*.apk .

      - name: Upload Release Asset (arm32v7)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: app-armeabi-v7a-release.apk
          asset_name: Crossonic-${{ needs.build.outputs.version }}-android-arm32v7.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release Asset (arm64v8)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: app-arm64-v8a-release.apk
          asset_name: Crossonic-${{ needs.build.outputs.version }}-android-arm64v8.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Release Asset (x64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: app-x86_64-release.apk
          asset_name: Crossonic-${{ needs.build.outputs.version }}-android-x64.apk
          asset_content_type: application/vnd.android.package-archive

      # TAR.GZ (x86_64)
      - name: Download tar.gz file
        uses: actions/download-artifact@v4
        with:
          name: tar-gz-x86-64-result
          path: tar-gz-x86-64-result

      - name: List files in tar.gz-directory
        run: ls -l tar-gz-x86-64-result

      - name: Copy tar.gz file to root
        run: cp tar-gz-x86-64-result/* result.tar.gz

      - name: Upload Release Asset (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: result.tar.gz
          asset_name: Crossonic-${{ needs.build.outputs.version }}-linux-x86-64.tar.gz
          asset_content_type: application/gzip

      # APPIMAGE (x86_64)
      - name: Download AppImage file
        uses: actions/download-artifact@v4
        with:
          name: appimage-x86-64-result
          path: appimage-x86-64-result

      - name: List files in appimage-directory
        run: ls -l appimage-x86-64-result

      - name: Copy AppImage file to root
        run: |
          for file in appimage-x86-64-result/*; do
            if [[ $file == *.AppImage && $file != *.AppImage.zsync ]]; then
              cp "$file" result.AppImage
            fi
          done

      - name: Upload Release Asset (AppImage)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: result.AppImage
          asset_name: Crossonic-${{ needs.build.outputs.version }}-linux-x86-64.AppImage
          asset_content_type: application/x-appimage

      # WINDOWS ZIP (x86_64)
      - name: Download windows zip file
        uses: actions/download-artifact@v4
        with:
          name: windows-zip-x86-64-result
          path: windows-zip-x86-64-result

      - name: Copy zip file to root
        run: cp windows-zip-x86-64-result/*.zip result.zip

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: result.zip
          asset_name: Crossonic-${{ needs.build.outputs.version }}-windows-x86-64.zip
          asset_content_type: application/zip
      # WINDOWS Installer (x86_64)
      - name: Download windows installer file
        uses: actions/download-artifact@v4
        with:
          name: windows-installer-x86-64-result
          path: windows-installer-x86-64-result

      - name: Copy installer file to root
        run: cp windows-installer-x86-64-result/crossonic-installer.exe crossonic-installer.exe

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: crossonic-installer.exe
          asset_name: Crossonic-${{ needs.build.outputs.version }}-windows-x86-64.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      # macOS .dmg (universal)
      - name: Download macOS .dmg file
        uses: actions/download-artifact@v4
        with:
          name: macos-dmg-result
          path: macos-dmg-result

      - name: Copy .dmg file to root
        run: cp macos-dmg-result/Crossonic.dmg Crossonic.dmg

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: Crossonic.dmg
          asset_name: Crossonic-${{ needs.build.outputs.version }}-macOS-universal.dmg
          asset_content_type: application/x-apple-diskimage
      # web
      - name: Download web .zip file
        uses: actions/download-artifact@v4
        with:
          name: web-zip-result
          path: web-zip-result

      - name: Copy .zip file to root
        run: cp web-zip-result/crossonic.zip crossonic.zip

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.draft_release.outputs.upload_url }}
          asset_path: crossonic.zip
          asset_name: Crossonic-${{ needs.build.outputs.version }}-web.zip
          asset_content_type: application/zip
