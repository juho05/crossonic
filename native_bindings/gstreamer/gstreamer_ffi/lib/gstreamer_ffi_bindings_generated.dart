// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/gstreamer_ffi.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class GstreamerFFIBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  GstreamerFFIBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  GstreamerFFIBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void free_resources() {
    return _free_resources();
  }

  late final _free_resourcesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('free_resources');
  late final _free_resources = _free_resourcesPtr.asFunction<void Function()>();

  int init(
    OnEOS on_eos,
    OnError on_error,
    OnWarning on_warning,
    OnBuffering on_buffering,
    OnStateChanged on_state_changed,
    OnStreamStart on_stream_start,
    OnAboutToFinish on_about_to_finish,
    int run_main_loop,
  ) {
    return _init(
      on_eos,
      on_error,
      on_warning,
      on_buffering,
      on_state_changed,
      on_stream_start,
      on_about_to_finish,
      run_main_loop,
    );
  }

  late final _initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              OnEOS,
              OnError,
              OnWarning,
              OnBuffering,
              OnStateChanged,
              OnStreamStart,
              OnAboutToFinish,
              ffi.Int)>>('init');
  late final _init = _initPtr.asFunction<
      int Function(OnEOS, OnError, OnWarning, OnBuffering, OnStateChanged,
          OnStreamStart, OnAboutToFinish, int)>();

  int set_state(
    int state,
  ) {
    return _set_state(
      state,
    );
  }

  late final _set_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('set_state');
  late final _set_state = _set_statePtr.asFunction<int Function(int)>();

  void set_url(
    ffi.Pointer<ffi.Char> url,
  ) {
    return _set_url(
      url,
    );
  }

  late final _set_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'set_url');
  late final _set_url =
      _set_urlPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void set_volume(
    double volume,
  ) {
    return _set_volume(
      volume,
    );
  }

  late final _set_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Double)>>('set_volume');
  late final _set_volume = _set_volumePtr.asFunction<void Function(double)>();

  int seek(
    int milliseconds,
  ) {
    return _seek(
      milliseconds,
    );
  }

  late final _seekPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int)>>('seek');
  late final _seek = _seekPtr.asFunction<int Function(int)>();

  int get_position_ms() {
    return _get_position_ms();
  }

  late final _get_position_msPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('get_position_ms');
  late final _get_position_ms =
      _get_position_msPtr.asFunction<int Function()>();

  void waitUntilReady() {
    return _waitUntilReady();
  }

  late final _waitUntilReadyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('waitUntilReady');
  late final _waitUntilReady = _waitUntilReadyPtr.asFunction<void Function()>();
}

abstract class ErrorType {
  static const int ERR_NONE = 0;
  static const int ERR_UNKNOWN = 1;
  static const int ERR_CREATE_ELEMENTS = 2;
  static const int ERR_SET_PLAYBIN_STATE = 3;
  static const int ERR_SEEKING_NOT_SUPPORTED = 4;
}

abstract class BufferingMode {
  static const int BUFFERING_STREAM = 0;
  static const int BUFFERING_DOWNLOAD = 1;
  static const int BUFFERING_TIMESHIFT = 2;
  static const int BUFFERING_LIVE = 3;
}

abstract class State {
  static const int STATE_VOID_PENDING = 0;
  static const int STATE_NULL = 1;
  static const int STATE_READY = 2;
  static const int STATE_PAUSED = 3;
  static const int STATE_PLAYING = 4;
}

typedef OnEOS = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef OnError = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int code, ffi.Pointer<ffi.Char> message,
            ffi.Pointer<ffi.Char> debug_msg)>>;
typedef OnWarning = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int code, ffi.Pointer<ffi.Char> message)>>;
typedef OnBuffering = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int percent, ffi.Int32 mode, ffi.Int avg_in, ffi.Int avg_out)>>;
typedef OnStateChanged = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Int32 old_state, ffi.Int32 new_state)>>;
typedef OnStreamStart = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef OnAboutToFinish = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
